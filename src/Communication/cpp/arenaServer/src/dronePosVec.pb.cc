// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: dronePosVec.proto
// Protobuf C++ Version: 5.29.2

#include "dronePosVec.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace dronePosVec {

inline constexpr dronePosition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : posshape_{},
        _posshape_cached_byte_size_{0},
        position_{},
        rotshape_{},
        _rotshape_cached_byte_size_{0},
        rotation_{},
        cameraraw_{},
        _cameraraw_cached_byte_size_{0},
        rotation2_{},
        devicetype_{static_cast< ::dronePosVec::dataDevices >(0)},
        camiteration_{0u},
        timestamp_ns_{::uint64_t{0u}},
        dronebattery_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR dronePosition::dronePosition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct dronePositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR dronePositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~dronePositionDefaultTypeInternal() {}
  union {
    dronePosition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 dronePositionDefaultTypeInternal _dronePosition_default_instance_;

inline constexpr droneControl::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : motorfl_{0},
        motorfr_{0},
        motorbl_{0},
        motorbr_{0},
        killswitch_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR droneControl::droneControl(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct droneControlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR droneControlDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~droneControlDefaultTypeInternal() {}
  union {
    droneControl _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 droneControlDefaultTypeInternal _droneControl_default_instance_;

inline constexpr dataTransfers::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : msg_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sockaddr_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{static_cast< ::dronePosVec::progName >(0)},
        type_{static_cast< ::dronePosVec::transferType >(0)},
        timesync_ns_{::int64_t{0}},
        port_{0u},
        sockaddrlen_{0u},
        sa_family_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR dataTransfers::dataTransfers(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct dataTransfersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR dataTransfersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~dataTransfersDefaultTypeInternal() {}
  union {
    dataTransfers _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 dataTransfersDefaultTypeInternal _dataTransfers_default_instance_;
}  // namespace dronePosVec
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dronePosVec_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dronePosVec_2eproto = nullptr;
const ::uint32_t
    TableStruct_dronePosVec_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, _impl_.devicetype_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, _impl_.posshape_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, _impl_.position_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, _impl_.rotshape_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, _impl_.rotation_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, _impl_.timestamp_ns_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, _impl_.camiteration_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, _impl_.cameraraw_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, _impl_.rotation2_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, _impl_.dronebattery_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::dronePosVec::droneControl, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::dronePosVec::droneControl, _impl_.motorfl_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::droneControl, _impl_.motorfr_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::droneControl, _impl_.motorbl_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::droneControl, _impl_.motorbr_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::droneControl, _impl_.killswitch_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, _impl_.msg_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, _impl_.timesync_ns_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, _impl_.ip_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, _impl_.port_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, _impl_.sockaddr_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, _impl_.sockaddrlen_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, _impl_.sa_family_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::dronePosVec::dronePosition)},
        {18, -1, -1, sizeof(::dronePosVec::droneControl)},
        {31, -1, -1, sizeof(::dronePosVec::dataTransfers)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::dronePosVec::_dronePosition_default_instance_._instance,
    &::dronePosVec::_droneControl_default_instance_._instance,
    &::dronePosVec::_dataTransfers_default_instance_._instance,
};
const char descriptor_table_protodef_dronePosVec_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\021dronePosVec.proto\022\013dronePosVec\"\205\002\n\rdro"
    "nePosition\022,\n\ndeviceType\030\001 \001(\0162\030.dronePo"
    "sVec.dataDevices\022\024\n\010posShape\030\002 \003(\rB\002\020\001\022\024"
    "\n\010position\030\003 \003(\002B\002\020\001\022\024\n\010rotShape\030\004 \003(\rB\002"
    "\020\001\022\024\n\010rotation\030\005 \003(\002B\002\020\001\022\024\n\014timestamp_ns"
    "\030\006 \001(\004\022\024\n\014camIteration\030\007 \001(\r\022\025\n\tcameraRa"
    "w\030\010 \003(\rB\002\020\001\022\025\n\trotation2\030\t \003(\002B\002\020\001\022\024\n\014dr"
    "oneBattery\030\n \001(\002\"f\n\014droneControl\022\017\n\007moto"
    "rFL\030\001 \001(\002\022\017\n\007motorFR\030\002 \001(\002\022\017\n\007motorBL\030\003 "
    "\001(\002\022\017\n\007motorBR\030\004 \001(\002\022\022\n\nkillswitch\030\005 \001(\010"
    "\"\321\001\n\rdataTransfers\022!\n\002ID\030\001 \001(\0162\025.dronePo"
    "sVec.progName\022\'\n\004type\030\002 \001(\0162\031.dronePosVe"
    "c.transferType\022\013\n\003msg\030\003 \001(\t\022\023\n\013timeSync_"
    "ns\030\004 \001(\003\022\n\n\002IP\030\005 \001(\t\022\014\n\004port\030\006 \001(\r\022\020\n\010so"
    "ckaddr\030\007 \001(\014\022\023\n\013sockaddrlen\030\010 \001(\r\022\021\n\tsa_"
    "family\030\t \001(\r*a\n\013dataDevices\022\013\n\007IMUonly\020\000"
    "\022\r\n\tCameraPos\020\001\022\020\n\014KalmanFilter\020\002\022\020\n\014Cam"
    "eraImgRGB\020\003\022\022\n\016CameraImgDepth\020\004*Q\n\014trans"
    "ferType\022\014\n\010timeSync\020\000\022\016\n\nsocketInfo\020\001\022\017\n"
    "\013stateChange\020\002\022\t\n\005start\020\003\022\007\n\003end\020\004*O\n\010pr"
    "ogName\022\n\n\006server\020\000\022\t\n\005drone\020\001\022\r\n\testimat"
    "or\020\002\022\t\n\005arena\020\003\022\n\n\006camera\020\004\022\006\n\002rl\020\005b\006pro"
    "to3"
};
static ::absl::once_flag descriptor_table_dronePosVec_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_dronePosVec_2eproto = {
    false,
    false,
    883,
    descriptor_table_protodef_dronePosVec_2eproto,
    "dronePosVec.proto",
    &descriptor_table_dronePosVec_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_dronePosVec_2eproto::offsets,
    file_level_enum_descriptors_dronePosVec_2eproto,
    file_level_service_descriptors_dronePosVec_2eproto,
};
namespace dronePosVec {
const ::google::protobuf::EnumDescriptor* dataDevices_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_dronePosVec_2eproto);
  return file_level_enum_descriptors_dronePosVec_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t dataDevices_internal_data_[] = {
    327680u, 0u, };
bool dataDevices_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* transferType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_dronePosVec_2eproto);
  return file_level_enum_descriptors_dronePosVec_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t transferType_internal_data_[] = {
    327680u, 0u, };
bool transferType_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* progName_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_dronePosVec_2eproto);
  return file_level_enum_descriptors_dronePosVec_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t progName_internal_data_[] = {
    393216u, 0u, };
bool progName_IsValid(int value) {
  return 0 <= value && value <= 5;
}
// ===================================================================

class dronePosition::_Internal {
 public:
};

dronePosition::dronePosition(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dronePosVec.dronePosition)
}
inline PROTOBUF_NDEBUG_INLINE dronePosition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::dronePosVec::dronePosition& from_msg)
      : posshape_{visibility, arena, from.posshape_},
        _posshape_cached_byte_size_{0},
        position_{visibility, arena, from.position_},
        rotshape_{visibility, arena, from.rotshape_},
        _rotshape_cached_byte_size_{0},
        rotation_{visibility, arena, from.rotation_},
        cameraraw_{visibility, arena, from.cameraraw_},
        _cameraraw_cached_byte_size_{0},
        rotation2_{visibility, arena, from.rotation2_},
        _cached_size_{0} {}

dronePosition::dronePosition(
    ::google::protobuf::Arena* arena,
    const dronePosition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  dronePosition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, devicetype_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, devicetype_),
           offsetof(Impl_, dronebattery_) -
               offsetof(Impl_, devicetype_) +
               sizeof(Impl_::dronebattery_));

  // @@protoc_insertion_point(copy_constructor:dronePosVec.dronePosition)
}
inline PROTOBUF_NDEBUG_INLINE dronePosition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : posshape_{visibility, arena},
        _posshape_cached_byte_size_{0},
        position_{visibility, arena},
        rotshape_{visibility, arena},
        _rotshape_cached_byte_size_{0},
        rotation_{visibility, arena},
        cameraraw_{visibility, arena},
        _cameraraw_cached_byte_size_{0},
        rotation2_{visibility, arena},
        _cached_size_{0} {}

inline void dronePosition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, devicetype_),
           0,
           offsetof(Impl_, dronebattery_) -
               offsetof(Impl_, devicetype_) +
               sizeof(Impl_::dronebattery_));
}
dronePosition::~dronePosition() {
  // @@protoc_insertion_point(destructor:dronePosVec.dronePosition)
  SharedDtor(*this);
}
inline void dronePosition::SharedDtor(MessageLite& self) {
  dronePosition& this_ = static_cast<dronePosition&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* dronePosition::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) dronePosition(arena);
}
constexpr auto dronePosition::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.posshape_) +
          decltype(dronePosition::_impl_.posshape_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.position_) +
          decltype(dronePosition::_impl_.position_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.rotshape_) +
          decltype(dronePosition::_impl_.rotshape_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.rotation_) +
          decltype(dronePosition::_impl_.rotation_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.cameraraw_) +
          decltype(dronePosition::_impl_.cameraraw_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.rotation2_) +
          decltype(dronePosition::_impl_.rotation2_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(dronePosition), alignof(dronePosition), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&dronePosition::PlacementNew_,
                                 sizeof(dronePosition),
                                 alignof(dronePosition));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull dronePosition::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_dronePosition_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &dronePosition::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<dronePosition>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &dronePosition::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<dronePosition>(), &dronePosition::ByteSizeLong,
            &dronePosition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(dronePosition, _impl_._cached_size_),
        false,
    },
    &dronePosition::kDescriptorMethods,
    &descriptor_table_dronePosVec_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* dronePosition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 0, 2> dronePosition::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dronePosVec::dronePosition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .dronePosVec.dataDevices deviceType = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(dronePosition, _impl_.devicetype_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.devicetype_)}},
    // repeated uint32 posShape = 2 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.posshape_)}},
    // repeated float position = 3 [packed = true];
    {::_pbi::TcParser::FastF32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.position_)}},
    // repeated uint32 rotShape = 4 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.rotshape_)}},
    // repeated float rotation = 5 [packed = true];
    {::_pbi::TcParser::FastF32P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.rotation_)}},
    // uint64 timestamp_ns = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(dronePosition, _impl_.timestamp_ns_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.timestamp_ns_)}},
    // uint32 camIteration = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(dronePosition, _impl_.camiteration_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.camiteration_)}},
    // repeated uint32 cameraRaw = 8 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.cameraraw_)}},
    // repeated float rotation2 = 9 [packed = true];
    {::_pbi::TcParser::FastF32P1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.rotation2_)}},
    // float droneBattery = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 63, 0, PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.dronebattery_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .dronePosVec.dataDevices deviceType = 1;
    {PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.devicetype_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated uint32 posShape = 2 [packed = true];
    {PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.posshape_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // repeated float position = 3 [packed = true];
    {PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.position_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated uint32 rotShape = 4 [packed = true];
    {PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.rotshape_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // repeated float rotation = 5 [packed = true];
    {PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.rotation_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // uint64 timestamp_ns = 6;
    {PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.timestamp_ns_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint32 camIteration = 7;
    {PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.camiteration_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // repeated uint32 cameraRaw = 8 [packed = true];
    {PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.cameraraw_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // repeated float rotation2 = 9 [packed = true];
    {PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.rotation2_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // float droneBattery = 10;
    {PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.dronebattery_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void dronePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:dronePosVec.dronePosition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.posshape_.Clear();
  _impl_.position_.Clear();
  _impl_.rotshape_.Clear();
  _impl_.rotation_.Clear();
  _impl_.cameraraw_.Clear();
  _impl_.rotation2_.Clear();
  ::memset(&_impl_.devicetype_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.dronebattery_) -
      reinterpret_cast<char*>(&_impl_.devicetype_)) + sizeof(_impl_.dronebattery_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* dronePosition::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const dronePosition& this_ = static_cast<const dronePosition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* dronePosition::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const dronePosition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:dronePosVec.dronePosition)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .dronePosVec.dataDevices deviceType = 1;
          if (this_._internal_devicetype() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_devicetype(), target);
          }

          // repeated uint32 posShape = 2 [packed = true];
          {
            int byte_size = this_._impl_._posshape_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteUInt32Packed(
                  2, this_._internal_posshape(), byte_size, target);
            }
          }

          // repeated float position = 3 [packed = true];
          if (this_._internal_position_size() > 0) {
            target = stream->WriteFixedPacked(3, this_._internal_position(), target);
          }

          // repeated uint32 rotShape = 4 [packed = true];
          {
            int byte_size = this_._impl_._rotshape_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteUInt32Packed(
                  4, this_._internal_rotshape(), byte_size, target);
            }
          }

          // repeated float rotation = 5 [packed = true];
          if (this_._internal_rotation_size() > 0) {
            target = stream->WriteFixedPacked(5, this_._internal_rotation(), target);
          }

          // uint64 timestamp_ns = 6;
          if (this_._internal_timestamp_ns() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                6, this_._internal_timestamp_ns(), target);
          }

          // uint32 camIteration = 7;
          if (this_._internal_camiteration() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                7, this_._internal_camiteration(), target);
          }

          // repeated uint32 cameraRaw = 8 [packed = true];
          {
            int byte_size = this_._impl_._cameraraw_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteUInt32Packed(
                  8, this_._internal_cameraraw(), byte_size, target);
            }
          }

          // repeated float rotation2 = 9 [packed = true];
          if (this_._internal_rotation2_size() > 0) {
            target = stream->WriteFixedPacked(9, this_._internal_rotation2(), target);
          }

          // float droneBattery = 10;
          if (::absl::bit_cast<::uint32_t>(this_._internal_dronebattery()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                10, this_._internal_dronebattery(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:dronePosVec.dronePosition)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t dronePosition::ByteSizeLong(const MessageLite& base) {
          const dronePosition& this_ = static_cast<const dronePosition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t dronePosition::ByteSizeLong() const {
          const dronePosition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:dronePosVec.dronePosition)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated uint32 posShape = 2 [packed = true];
            {
              total_size +=
                  ::_pbi::WireFormatLite::UInt32SizeWithPackedTagSize(
                      this_._internal_posshape(), 1,
                      this_._impl_._posshape_cached_byte_size_);
            }
            // repeated float position = 3 [packed = true];
            {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_position_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated uint32 rotShape = 4 [packed = true];
            {
              total_size +=
                  ::_pbi::WireFormatLite::UInt32SizeWithPackedTagSize(
                      this_._internal_rotshape(), 1,
                      this_._impl_._rotshape_cached_byte_size_);
            }
            // repeated float rotation = 5 [packed = true];
            {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_rotation_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated uint32 cameraRaw = 8 [packed = true];
            {
              total_size +=
                  ::_pbi::WireFormatLite::UInt32SizeWithPackedTagSize(
                      this_._internal_cameraraw(), 1,
                      this_._impl_._cameraraw_cached_byte_size_);
            }
            // repeated float rotation2 = 9 [packed = true];
            {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_rotation2_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
           {
            // .dronePosVec.dataDevices deviceType = 1;
            if (this_._internal_devicetype() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_devicetype());
            }
            // uint32 camIteration = 7;
            if (this_._internal_camiteration() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_camiteration());
            }
            // uint64 timestamp_ns = 6;
            if (this_._internal_timestamp_ns() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_timestamp_ns());
            }
            // float droneBattery = 10;
            if (::absl::bit_cast<::uint32_t>(this_._internal_dronebattery()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void dronePosition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<dronePosition*>(&to_msg);
  auto& from = static_cast<const dronePosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dronePosVec.dronePosition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_posshape()->MergeFrom(from._internal_posshape());
  _this->_internal_mutable_position()->MergeFrom(from._internal_position());
  _this->_internal_mutable_rotshape()->MergeFrom(from._internal_rotshape());
  _this->_internal_mutable_rotation()->MergeFrom(from._internal_rotation());
  _this->_internal_mutable_cameraraw()->MergeFrom(from._internal_cameraraw());
  _this->_internal_mutable_rotation2()->MergeFrom(from._internal_rotation2());
  if (from._internal_devicetype() != 0) {
    _this->_impl_.devicetype_ = from._impl_.devicetype_;
  }
  if (from._internal_camiteration() != 0) {
    _this->_impl_.camiteration_ = from._impl_.camiteration_;
  }
  if (from._internal_timestamp_ns() != 0) {
    _this->_impl_.timestamp_ns_ = from._impl_.timestamp_ns_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_dronebattery()) != 0) {
    _this->_impl_.dronebattery_ = from._impl_.dronebattery_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void dronePosition::CopyFrom(const dronePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dronePosVec.dronePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void dronePosition::InternalSwap(dronePosition* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.posshape_.InternalSwap(&other->_impl_.posshape_);
  _impl_.position_.InternalSwap(&other->_impl_.position_);
  _impl_.rotshape_.InternalSwap(&other->_impl_.rotshape_);
  _impl_.rotation_.InternalSwap(&other->_impl_.rotation_);
  _impl_.cameraraw_.InternalSwap(&other->_impl_.cameraraw_);
  _impl_.rotation2_.InternalSwap(&other->_impl_.rotation2_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.dronebattery_)
      + sizeof(dronePosition::_impl_.dronebattery_)
      - PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.devicetype_)>(
          reinterpret_cast<char*>(&_impl_.devicetype_),
          reinterpret_cast<char*>(&other->_impl_.devicetype_));
}

::google::protobuf::Metadata dronePosition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class droneControl::_Internal {
 public:
};

droneControl::droneControl(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dronePosVec.droneControl)
}
droneControl::droneControl(
    ::google::protobuf::Arena* arena, const droneControl& from)
    : droneControl(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE droneControl::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void droneControl::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, motorfl_),
           0,
           offsetof(Impl_, killswitch_) -
               offsetof(Impl_, motorfl_) +
               sizeof(Impl_::killswitch_));
}
droneControl::~droneControl() {
  // @@protoc_insertion_point(destructor:dronePosVec.droneControl)
  SharedDtor(*this);
}
inline void droneControl::SharedDtor(MessageLite& self) {
  droneControl& this_ = static_cast<droneControl&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* droneControl::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) droneControl(arena);
}
constexpr auto droneControl::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(droneControl),
                                            alignof(droneControl));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull droneControl::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_droneControl_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &droneControl::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<droneControl>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &droneControl::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<droneControl>(), &droneControl::ByteSizeLong,
            &droneControl::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(droneControl, _impl_._cached_size_),
        false,
    },
    &droneControl::kDescriptorMethods,
    &descriptor_table_dronePosVec_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* droneControl::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> droneControl::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dronePosVec::droneControl>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float motorFL = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(droneControl, _impl_.motorfl_)}},
    // float motorFR = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(droneControl, _impl_.motorfr_)}},
    // float motorBL = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(droneControl, _impl_.motorbl_)}},
    // float motorBR = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(droneControl, _impl_.motorbr_)}},
    // bool killswitch = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(droneControl, _impl_.killswitch_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(droneControl, _impl_.killswitch_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float motorFL = 1;
    {PROTOBUF_FIELD_OFFSET(droneControl, _impl_.motorfl_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float motorFR = 2;
    {PROTOBUF_FIELD_OFFSET(droneControl, _impl_.motorfr_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float motorBL = 3;
    {PROTOBUF_FIELD_OFFSET(droneControl, _impl_.motorbl_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float motorBR = 4;
    {PROTOBUF_FIELD_OFFSET(droneControl, _impl_.motorbr_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool killswitch = 5;
    {PROTOBUF_FIELD_OFFSET(droneControl, _impl_.killswitch_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void droneControl::Clear() {
// @@protoc_insertion_point(message_clear_start:dronePosVec.droneControl)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.motorfl_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.killswitch_) -
      reinterpret_cast<char*>(&_impl_.motorfl_)) + sizeof(_impl_.killswitch_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* droneControl::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const droneControl& this_ = static_cast<const droneControl&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* droneControl::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const droneControl& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:dronePosVec.droneControl)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float motorFL = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_motorfl()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_motorfl(), target);
          }

          // float motorFR = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_motorfr()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_motorfr(), target);
          }

          // float motorBL = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_motorbl()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_motorbl(), target);
          }

          // float motorBR = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_motorbr()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_motorbr(), target);
          }

          // bool killswitch = 5;
          if (this_._internal_killswitch() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_killswitch(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:dronePosVec.droneControl)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t droneControl::ByteSizeLong(const MessageLite& base) {
          const droneControl& this_ = static_cast<const droneControl&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t droneControl::ByteSizeLong() const {
          const droneControl& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:dronePosVec.droneControl)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float motorFL = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_motorfl()) != 0) {
              total_size += 5;
            }
            // float motorFR = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_motorfr()) != 0) {
              total_size += 5;
            }
            // float motorBL = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_motorbl()) != 0) {
              total_size += 5;
            }
            // float motorBR = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_motorbr()) != 0) {
              total_size += 5;
            }
            // bool killswitch = 5;
            if (this_._internal_killswitch() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void droneControl::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<droneControl*>(&to_msg);
  auto& from = static_cast<const droneControl&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dronePosVec.droneControl)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_motorfl()) != 0) {
    _this->_impl_.motorfl_ = from._impl_.motorfl_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_motorfr()) != 0) {
    _this->_impl_.motorfr_ = from._impl_.motorfr_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_motorbl()) != 0) {
    _this->_impl_.motorbl_ = from._impl_.motorbl_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_motorbr()) != 0) {
    _this->_impl_.motorbr_ = from._impl_.motorbr_;
  }
  if (from._internal_killswitch() != 0) {
    _this->_impl_.killswitch_ = from._impl_.killswitch_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void droneControl::CopyFrom(const droneControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dronePosVec.droneControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void droneControl::InternalSwap(droneControl* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(droneControl, _impl_.killswitch_)
      + sizeof(droneControl::_impl_.killswitch_)
      - PROTOBUF_FIELD_OFFSET(droneControl, _impl_.motorfl_)>(
          reinterpret_cast<char*>(&_impl_.motorfl_),
          reinterpret_cast<char*>(&other->_impl_.motorfl_));
}

::google::protobuf::Metadata droneControl::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class dataTransfers::_Internal {
 public:
};

dataTransfers::dataTransfers(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dronePosVec.dataTransfers)
}
inline PROTOBUF_NDEBUG_INLINE dataTransfers::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::dronePosVec::dataTransfers& from_msg)
      : msg_(arena, from.msg_),
        ip_(arena, from.ip_),
        sockaddr_(arena, from.sockaddr_),
        _cached_size_{0} {}

dataTransfers::dataTransfers(
    ::google::protobuf::Arena* arena,
    const dataTransfers& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  dataTransfers* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, sa_family_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::sa_family_));

  // @@protoc_insertion_point(copy_constructor:dronePosVec.dataTransfers)
}
inline PROTOBUF_NDEBUG_INLINE dataTransfers::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : msg_(arena),
        ip_(arena),
        sockaddr_(arena),
        _cached_size_{0} {}

inline void dataTransfers::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, sa_family_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::sa_family_));
}
dataTransfers::~dataTransfers() {
  // @@protoc_insertion_point(destructor:dronePosVec.dataTransfers)
  SharedDtor(*this);
}
inline void dataTransfers::SharedDtor(MessageLite& self) {
  dataTransfers& this_ = static_cast<dataTransfers&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.msg_.Destroy();
  this_._impl_.ip_.Destroy();
  this_._impl_.sockaddr_.Destroy();
  this_._impl_.~Impl_();
}

inline void* dataTransfers::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) dataTransfers(arena);
}
constexpr auto dataTransfers::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(dataTransfers),
                                            alignof(dataTransfers));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull dataTransfers::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_dataTransfers_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &dataTransfers::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<dataTransfers>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &dataTransfers::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<dataTransfers>(), &dataTransfers::ByteSizeLong,
            &dataTransfers::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_._cached_size_),
        false,
    },
    &dataTransfers::kDescriptorMethods,
    &descriptor_table_dronePosVec_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* dataTransfers::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 0, 47, 2> dataTransfers::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dronePosVec::dataTransfers>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .dronePosVec.progName ID = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(dataTransfers, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.id_)}},
    // .dronePosVec.transferType type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(dataTransfers, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.type_)}},
    // string msg = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.msg_)}},
    // int64 timeSync_ns = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(dataTransfers, _impl_.timesync_ns_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.timesync_ns_)}},
    // string IP = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.ip_)}},
    // uint32 port = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(dataTransfers, _impl_.port_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.port_)}},
    // bytes sockaddr = 7;
    {::_pbi::TcParser::FastBS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.sockaddr_)}},
    // uint32 sockaddrlen = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(dataTransfers, _impl_.sockaddrlen_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.sockaddrlen_)}},
    // uint32 sa_family = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(dataTransfers, _impl_.sa_family_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.sa_family_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .dronePosVec.progName ID = 1;
    {PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .dronePosVec.transferType type = 2;
    {PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string msg = 3;
    {PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.msg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 timeSync_ns = 4;
    {PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.timesync_ns_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string IP = 5;
    {PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.ip_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 port = 6;
    {PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bytes sockaddr = 7;
    {PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.sockaddr_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // uint32 sockaddrlen = 8;
    {PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.sockaddrlen_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 sa_family = 9;
    {PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.sa_family_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\31\0\0\3\0\2\0\0\0\0\0\0\0\0\0\0"
    "dronePosVec.dataTransfers"
    "msg"
    "IP"
  }},
};

PROTOBUF_NOINLINE void dataTransfers::Clear() {
// @@protoc_insertion_point(message_clear_start:dronePosVec.dataTransfers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  _impl_.sockaddr_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.sa_family_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.sa_family_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* dataTransfers::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const dataTransfers& this_ = static_cast<const dataTransfers&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* dataTransfers::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const dataTransfers& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:dronePosVec.dataTransfers)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .dronePosVec.progName ID = 1;
          if (this_._internal_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_id(), target);
          }

          // .dronePosVec.transferType type = 2;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_type(), target);
          }

          // string msg = 3;
          if (!this_._internal_msg().empty()) {
            const std::string& _s = this_._internal_msg();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dronePosVec.dataTransfers.msg");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // int64 timeSync_ns = 4;
          if (this_._internal_timesync_ns() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<4>(
                    stream, this_._internal_timesync_ns(), target);
          }

          // string IP = 5;
          if (!this_._internal_ip().empty()) {
            const std::string& _s = this_._internal_ip();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dronePosVec.dataTransfers.IP");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // uint32 port = 6;
          if (this_._internal_port() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                6, this_._internal_port(), target);
          }

          // bytes sockaddr = 7;
          if (!this_._internal_sockaddr().empty()) {
            const std::string& _s = this_._internal_sockaddr();
            target = stream->WriteBytesMaybeAliased(7, _s, target);
          }

          // uint32 sockaddrlen = 8;
          if (this_._internal_sockaddrlen() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                8, this_._internal_sockaddrlen(), target);
          }

          // uint32 sa_family = 9;
          if (this_._internal_sa_family() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                9, this_._internal_sa_family(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:dronePosVec.dataTransfers)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t dataTransfers::ByteSizeLong(const MessageLite& base) {
          const dataTransfers& this_ = static_cast<const dataTransfers&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t dataTransfers::ByteSizeLong() const {
          const dataTransfers& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:dronePosVec.dataTransfers)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string msg = 3;
            if (!this_._internal_msg().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_msg());
            }
            // string IP = 5;
            if (!this_._internal_ip().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ip());
            }
            // bytes sockaddr = 7;
            if (!this_._internal_sockaddr().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_sockaddr());
            }
            // .dronePosVec.progName ID = 1;
            if (this_._internal_id() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_id());
            }
            // .dronePosVec.transferType type = 2;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
            // int64 timeSync_ns = 4;
            if (this_._internal_timesync_ns() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_timesync_ns());
            }
            // uint32 port = 6;
            if (this_._internal_port() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_port());
            }
            // uint32 sockaddrlen = 8;
            if (this_._internal_sockaddrlen() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_sockaddrlen());
            }
            // uint32 sa_family = 9;
            if (this_._internal_sa_family() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_sa_family());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void dataTransfers::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<dataTransfers*>(&to_msg);
  auto& from = static_cast<const dataTransfers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dronePosVec.dataTransfers)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (!from._internal_sockaddr().empty()) {
    _this->_internal_set_sockaddr(from._internal_sockaddr());
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_timesync_ns() != 0) {
    _this->_impl_.timesync_ns_ = from._impl_.timesync_ns_;
  }
  if (from._internal_port() != 0) {
    _this->_impl_.port_ = from._impl_.port_;
  }
  if (from._internal_sockaddrlen() != 0) {
    _this->_impl_.sockaddrlen_ = from._impl_.sockaddrlen_;
  }
  if (from._internal_sa_family() != 0) {
    _this->_impl_.sa_family_ = from._impl_.sa_family_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void dataTransfers::CopyFrom(const dataTransfers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dronePosVec.dataTransfers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void dataTransfers::InternalSwap(dataTransfers* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_, &other->_impl_.msg_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_, &other->_impl_.ip_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sockaddr_, &other->_impl_.sockaddr_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.sa_family_)
      + sizeof(dataTransfers::_impl_.sa_family_)
      - PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata dataTransfers::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace dronePosVec
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_dronePosVec_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
